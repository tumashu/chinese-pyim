;;; pyim-common.el --- common utilities for pyim

;; * Header
;; This file has common utilities used by pyim

;;; Commentary:

;; * 說明文檔                                                              :doc:
;; 這個模塊包含了被其它文件使用的公用函數. 注意盡量使其最小化因為它
;; 被其他模塊多次重複載入

;;; Code:
;; * 代碼                                                                 :code:

(defvar pyim-debug nil)

(defvar pyim-prefer-emacs-thread nil
  "是否優先使用 emacs thread 功能來生成 dcache。

如果這個變數設置為 t, 那麼當 emacs thread 功能可以使用時，
pyim 優先使用 emacs thread 功能來生成 dcache，如果設置為 nil，
pyim 總是使用 emacs-async 包來生成 dcache。

不過這個選項開啟之後，會顯著的減慢詞庫加載速度，特別是
五筆等形碼輸入法。")

(defcustom pyim-dcache-directory (locate-user-emacs-file "pyim/dcache/")
  "一個目錄，用於保存 pyim 詞庫對應的 cache 文件。"
  :type 'directory
  :group 'pyim)

(defun pyim-dcache-get-value-from-file (file)
  "讀取保存到 FILE 裡面的 value。"
  (when (file-exists-p file)
    (with-temp-buffer
      (insert-file-contents file)
      (eval (read (current-buffer))))))

(defun pyim-dcache-get-variable (variable)
  "從 `pyim-dcache-directory' 中讀取與 VARIABLE 對應的文件中保存的值。"
  (let ((file (concat (file-name-as-directory pyim-dcache-directory)
                      (symbol-name variable))))
    (pyim-dcache-get-value-from-file file)))

(defun pyim-dcache-set-variable (variable &optional force-restore fallback-value)
  "設置變數。

如果 VARIABLE 的值為 nil，則使用 ‘pyim-dcache-directory’ 中對應文件的內容來設置
VARIABLE 變數，FORCE-RESTORE 設置為 t 時，強制恢復，變數原來的值將丟失。
如果獲取的變數值為 nil 時，將 VARIABLE 的值設置為 FALLBACK-VALUE。"
  (when (or force-restore (not (symbol-value variable)))
    (let ((file (concat (file-name-as-directory pyim-dcache-directory)
                        (symbol-name variable))))
      (set variable (or (pyim-dcache-get-value-from-file file)
                        fallback-value
                        (make-hash-table :test #'equal))))))

(defun pyim-dcache-save-value-to-file (value file)
  "將 VALUE 保存到 FILE 文件中."
  (when value
    (with-temp-buffer
      (insert ";; Auto generated by `pyim-dhashcache-save-variable-to-file', don't edit it by hand!\n")
      (insert (format ";; Build time: %s\n\n" (current-time-string)))
      (insert (prin1-to-string value))
      (insert "\n\n")
      (insert ";; Local Variables:\n")
      (insert ";; coding: utf-8-unix\n")
      (insert ";; End:")
      (make-directory (file-name-directory file) t)
      (let ((save-silently t))
        (pyim-dcache-write-file file)))))


(defun pyim-dcache-save-variable (variable)
  "將 VARIABLE 變數的取值保存到 `pyim-dcache-directory' 中對應文件中。"
  (let ((file (concat (file-name-as-directory pyim-dcache-directory)
                      (symbol-name variable)))
        (value (symbol-value variable)))
    (pyim-dcache-save-value-to-file value file)))

;; ** 處理詞庫文件
(defun pyim-use-emacs-thread-p ()
  "判斷是否使用 emacs thread 功能來生成 thread。"
  (and pyim-prefer-emacs-thread
       (>= emacs-major-version 26)))

(defun pyim-dcache-write-file (filename &optional confirm)
  "A helper function to write dcache files."
  (let ((coding-system-for-write 'utf-8-unix))
    (when (and confirm
               (file-exists-p filename)
               ;; NS does its own confirm dialog.
               (not (and (eq (framep-on-display) 'ns)
                         (listp last-nonmenu-event)
                         use-dialog-box))
               (or (y-or-n-p (format-message
                              "File `%s' exists; overwrite? " filename))
                   (user-error "Canceled"))))
    (write-region (point-min) (point-max) filename nil :silent)
    (message "Saving file %s..." filename)))

(defun pyim-string-match-p (regexp string &optional start)
  "與 `string-match-p' 類似，如果 REGEXP 和 STRING 是非字元串時，
不會報錯。"
  (and (stringp regexp)
       (stringp string)
       (string-match-p regexp string start)))

(defun pyim-dline-parse (&optional seperaters)
  "解析詞庫文件當前行的信息，SEPERATERS 為詞庫使用的分隔符。"
  (let* ((begin (line-beginning-position))
         (end (line-end-position))
         (items (split-string
                 (buffer-substring-no-properties begin end)
                 seperaters)))
    items))

;; * Footer
(provide 'pyim-common)

;;; pyim-common.el ends here
